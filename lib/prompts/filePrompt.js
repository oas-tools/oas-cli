import jsyaml from "js-yaml";
import fs from "fs";

export default [
    {
        type: "file-tree-selection",
        name: "resourceFile",
        message: "Select your resources' file",
        enableGoUpperDirectory: true,
        hideRoot: true,
        when: (answers) => answers.command === 'OpenAPI File',
        validate: (input) => /[\w_]+\.yaml$|[\w_]+\.json$/.test(input),
    },
    {
        type: "list",
        name: "version",
        message: "Choose OpenAPI version",
        default: "3.0.3",
        choices: [{name: "3.0", value: "3.0.3"}, {name: "3.1", value: "3.1.0"}],
        when: (answers) => answers.command === 'OpenAPI File'
    },
    {
        type: "input",
        name: "title",
        message: "Enter a title for the described API",
        default: "Autogenerated Api",
        validate: (input) => (/^[\w_\ ]+$/).test(input),
        when: (answers) => answers.command === 'OpenAPI File'
    },
    {
        type: "input",
        name: "description",
        message: "Enter a description for the described API",
        default: "Generated with OAS TOOLS CLI",
        validate: (input) => (/^[\w_\ ]+$/).test(input),
        when: (answers) => answers.command === 'OpenAPI File'
    },
    (filepath) => {
        let content = fs.readFileSync(filepath);
        if ((/\.yaml/).test(filepath)) content = jsyaml.load(content);
        else content = JSON.parse(content);

        if (Array.isArray(content)) return content.flatMap((obj, idx) => generatePrompts(obj, idx));
        else return generatePrompts(content);

        function generatePrompts(object, idx) {
            const rNameQuestion = 'resourceName' + (idx !== undefined ? `-${idx}` : '');
            const idNameQuestion = 'idProperty' + (idx !== undefined ? `-${idx}` : '');
            const opNameQuestion = 'operations' + (idx !== undefined ? `-${idx}` : '');
            return [
                {
                    type: "input",
                    name: rNameQuestion,
                    message: `Provide a name for the resource containing {${Object.keys(object)}}`,
                    when: (answers) => answers.command === 'OpenAPI File',
                    validate: (input, answers) => {
                        return (/^[\w_]+$/).test(input) && 
                        Object.entries(answers)
                            .filter(([key, _val]) => key.includes('resourceName'))
                            .every(([_key, val]) => input !== val)
                    }
                },
                {
                    type: "list",
                    name: idNameQuestion,
                    choices: [...Object.keys(object)],
                    loop: false,
                    message: (answers) => `Which will be the 'id' property for '${answers[rNameQuestion]}'`,
                    when: (answers) => answers.command === 'OpenAPI File',
                },
                {
                    type: "checkbox",
                    name: opNameQuestion,
                    choices: ['GET', 'POST', 'PUT', 'DELETE'],
                    default: ['GET', 'POST', 'PUT', 'DELETE'],
                    message: (answers) => `Specify which operations will be available for '${answers[rNameQuestion]}'`,
                    when: (answers) => answers.command === 'OpenAPI File'
                }
            ];
        }
    },
    {
        type: "list",
        name: "json",
        message: "Choose the preferred format for the OpenAPI Document",
        default: false,
        choices: [{name: "JSON", value: true}, {name: "YAML", value: false}],
        when: (answers) => answers.command === 'OpenAPI File'
    },
    {
        type: "input",
        name: "pathName",
        message: "Where will the file be generated?",
        validate: (input, answers) => (answers.json ? /[\w_\\/]+\.json$/ : /[\w_\\/]+\.yaml$/).test(input),
        default: (answers) => `oas-doc.${answers.json ? 'json' : 'yaml'}`,
        when: (answers) => answers.command === 'OpenAPI File'
    },
    {
        type: "confirm",
        name: "confirmation",
        message: "Generate file with this options?",
        when: (answers) => answers.command === 'OpenAPI File',
    }
]